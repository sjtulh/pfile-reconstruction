function hdrrdb = read_gehdrP11(pfname)
%READ_GEHDR  Read the header of a GE raw data file into a structure
%
%  usage: hdr = read_gehdrP11(Pfilename)
%
%  hdr:   a structure containing the following elements:
%
%         hdr.rdb - a structure equivilant to GE's rdb_hdr_rec
%         hdr.image - a structure equivilant to GE's rdb_hdr_image
%         hdr.series - a structure equivilant to GE's rdb_hdr_series
%         hdr.exam - a structure equivilant to GE's rdb_hdr_exam
%         hdr.data_acq_tab - a structure array equivilant to GE's rdb_hdr_data_acq_tab
%
%         and these elements that are straight storage dumps of their respective
%         GE structures:
%
%         hdr.per_pass
%         hdr.unlock_raw
%         hdr.nex_tab
%         hdr.nex_abort_tab
%         hdr.tool
%
%  e.g.:  >> hdr = fopen('P12345.7');
%
%  note:  Raw file must have RDB_RDBM_REVISION = 11.0

%  This script was generated from GE source using 'gehdr2matlab' written by DB Clayton


id = fopen(pfname, 'r', 'ieee-le');
fseek(id, 0, -1);  % go to start of raw data file
hdr.rdb.rdbm_rev = fread(id, 1, 'float');  
hdr.rdb.run_int = fread(id, 1, 'long');  % Rdy pkt Run Number 
hdr.rdb.scan_seq = fread(id, 1, 'short');  % Rdy pkt Sequence Number 
hdr.rdb.run_char = fread(id, 6, '*char')';  % Rdy pkt Run no in char 
hdr.rdb.scan_date = fread(id, 10, '*char')';  % 
hdr.rdb.scan_time = fread(id, 8, '*char')';  % 
hdr.rdb.logo = fread(id, 10, '*char')';  % rdbm used to verify file 

hdr.rdb.file_contents = fread(id, 1, 'short');  % Data type 0=emp 1=nrec 2=rw 0, 1, 2 
hdr.rdb.lock_mode = fread(id, 1, 'short');  % unused 
hdr.rdb.dacq_ctrl = fread(id, 1, 'short');  % rhdacqctrl bit mask 15 bits 
hdr.rdb.recon_ctrl = fread(id, 1, 'short');  % rhrcctrl bit mask 15 bits 
hdr.rdb.exec_ctrl = fread(id, 1, 'short');  % rhexecctrl bit mask 15 bits 
hdr.rdb.scan_type = fread(id, 1, 'short');  % bit mask 15 bits 
hdr.rdb.data_collect_type = fread(id, 1, 'short');  % rhtype bit mask 15 bits 
hdr.rdb.data_format = fread(id, 1, 'short');  % rhformat bit mask 15 bits 
hdr.rdb.recon = fread(id, 1, 'short');  % rhrecon proc-a-son recon 0 - 100 
hdr.rdb.datacq = fread(id, 1, 'short');  % rhdatacq proc-a-son dacq 

hdr.rdb.npasses = fread(id, 1, 'short');  % rhnpasses passes for a scan 0 - 256 
hdr.rdb.npomp = fread(id, 1, 'short');  % rhnpomp pomp group slices 1,2 
hdr.rdb.nslices = fread(id, 1, 'short');  % rhnslices slices in a pass 0 - 256 
hdr.rdb.N_sl = hdr.rdb.nslices;
hdr.rdb.nechoes = fread(id, 1, 'short');  % rhnecho echoes of a slice 1 - 32 
hdr.rdb.navs = fread(id, 1, 'short');  % rhnavs num of excitiations 1 - 32727 
hdr.rdb.nframes = fread(id, 1, 'short');  % rhnframes yres 0 - 1024 
hdr.rdb.baseline_views = fread(id, 1, 'short');  % rhbline baselines 0 - 1028 
hdr.rdb.hnover = fread(id, 1, 'short');  % rhhnover overscans 0 - 1024 
hdr.rdb.frame_size = fread(id, 1, 'ushort');  % rhfrsize xres 0 - 32768 
hdr.rdb.point_size = fread(id, 1, 'short');  % rhptsize 2 - 4 

hdr.rdb.vquant = fread(id, 1, 'short');  % rhvquant 3d volumes 1 

hdr.rdb.cheart = fread(id, 1, 'short');  % RX Cine heart phases 1 - 32 
hdr.rdb.ctr = fread(id, 1, 'float');  % RX Cine TR in sec 0 - 3.40282e38
hdr.rdb.ctrr = fread(id, 1, 'float');  % RX Cine RR in sec 0 - 30.0 

hdr.rdb.initpass = fread(id, 1, 'short');  % rhinitpass allocate passes 0 - 32767 
hdr.rdb.incrpass = fread(id, 1, 'short');  % rhincrpass tps autopauses 0 - 32767 

hdr.rdb.method_ctrl = fread(id, 1, 'short');  % rhmethod 0=recon, 1=psd 0, 1 
hdr.rdb.da_xres = fread(id, 1, 'ushort');  % rhdaxres 0 - 32768 
hdr.rdb.da_yres = fread(id, 1, 'short');  % rhdayres 0 - 2049 
hdr.rdb.rc_xres = fread(id, 1, 'short');  % rhrcxres 0 - 1024 
hdr.rdb.rc_yres = fread(id, 1, 'short');  % rhrcyres 0 - 1024 
hdr.rdb.N_hor = hdr.rdb.rc_xres;
hdr.rdb.N_ver = hdr.rdb.rc_yres;
hdr.rdb.im_size = fread(id, 1, 'short');  % rhimsize 0 - 512 
hdr.rdb.rc_zres = fread(id, 1, 'long');  % power of 2 > rhnslices 0 - 128 

hdr.rdb.raw_pass_size = fread(id, 1, 'ulong');  % rhrawsize 0 - 2147483647
hdr.rdb.sspsave = fread(id, 1, 'ulong');  % rhsspsave 0 - 2147483647
hdr.rdb.udasave = fread(id, 1, 'ulong');  % rhudasave 0 - 2147483647
hdr.rdb.fermi_radius = fread(id, 1, 'float');  % rhfermr fermi radius 0 - 3.40282e38
hdr.rdb.fermi_width = fread(id, 1, 'float');  % rhfermw fermi width 0 - 3.40282e38
hdr.rdb.fermi_ecc = fread(id, 1, 'float');  % rhferme fermi excentiricty 0 - 3.40282e38
hdr.rdb.clip_min = fread(id, 1, 'float');  % rhclipmin 4x IP limit +-16383 
hdr.rdb.clip_max = fread(id, 1, 'float');  % rhclipmax 4x IP limit +-16383 
hdr.rdb.default_offset = fread(id, 1, 'float');  % rhdoffset default offset = 0 +-3.40282e38 
hdr.rdb.xoff = fread(id, 1, 'float');  % rhxoff scroll img in x +-256 
hdr.rdb.yoff = fread(id, 1, 'float');  % rhyoff scroll img in y +-256 
hdr.rdb.nwin = fread(id, 1, 'float');  % rhnwin hecho window width 0 - 256 
hdr.rdb.ntran = fread(id, 1, 'float');  % rhntran hecho trans width 0 - 256 
hdr.rdb.scalei = fread(id, 1, 'float');  % PS rhscalei +-3.40282e38 
hdr.rdb.scaleq = fread(id, 1, 'float');  % PS rhscaleq def = 0 +-3.40282e38 
hdr.rdb.rotation = fread(id, 1, 'short');  % RX 0 90 180 270 deg 0 - 3 
hdr.rdb.transpose = fread(id, 1, 'short');  % RX 0, 1 n / y transpose 0 - 1
hdr.rdb.kissoff_views = fread(id, 1, 'short');  % rhblank zero image views 0 - 512 
hdr.rdb.slblank = fread(id, 1, 'short');  % rhslblank slice blank 3d 0 - 128 
hdr.rdb.gradcoil = fread(id, 1, 'short');  % RX 0=off 1=Schnk 2=Rmr 0 - 2 
hdr.rdb.ddaover = fread(id, 1, 'short');  % rhddaover unused 

hdr.rdb.sarr = fread(id, 1, 'short');  % SARR bit mask 15 bits 
hdr.rdb.fd_tr = fread(id, 1, 'short');  % SARR feeder timing info 
hdr.rdb.fd_te = fread(id, 1, 'short');  % SARR feeder timing info 
hdr.rdb.fd_ctrl = fread(id, 1, 'short');  % SARR control of feeder 
hdr.rdb.algor_num = fread(id, 1, 'short');  % SARR df decimation ratio 
hdr.rdb.fd_df_dec = fread(id, 1, 'short');  % SARR which feeder algor 

buff = fread(id, 8, 'short');  % kluge for type RDB_MULTI_RCV_TYPE
hdr.rdb.dab_start_rcv = buff(1:2:end);  % kluge for type RDB_MULTI_RCV_TYPE
hdr.rdb.dab_stop_rcv = buff(2:2:end);  % kluge for type RDB_MULTI_RCV_TYPE
hdr.rdb.user0 = fread(id, 1, 'float');  % rhuser0 +-3.40282e38 
hdr.rdb.user1 = fread(id, 1, 'float');  % rhuser1 +-3.40282e38 
hdr.rdb.user2 = fread(id, 1, 'float');  % rhuser2 +-3.40282e38 
hdr.rdb.user3 = fread(id, 1, 'float');  % rhuser3 +-3.40282e38 
hdr.rdb.user4 = fread(id, 1, 'float');  % rhuser4 +-3.40282e38 
hdr.rdb.user5 = fread(id, 1, 'float');  % rhuser5 +-3.40282e38 
hdr.rdb.user6 = fread(id, 1, 'float');  % rhuser6 +-3.40282e38 
hdr.rdb.user7 = fread(id, 1, 'float');  % rhuser7 +-3.40282e38 
hdr.rdb.user8 = fread(id, 1, 'float');  % rhuser8 +-3.40282e38 
hdr.rdb.user9 = fread(id, 1, 'float');  % rhuser9 +-3.40282e38 
hdr.rdb.user10 = fread(id, 1, 'float');  % rhuser10 +-3.40282e38 
hdr.rdb.user11 = fread(id, 1, 'float');  % rhuser11 +-3.40282e38 
hdr.rdb.user12 = fread(id, 1, 'float');  % rhuser12 +-3.40282e38 
hdr.rdb.user13 = fread(id, 1, 'float');  % rhuser13 +-3.40282e38 
hdr.rdb.user14 = fread(id, 1, 'float');  % rhuser14 +-3.40282e38 
hdr.rdb.user15 = fread(id, 1, 'float');  % rhuser15 +-3.40282e38 
hdr.rdb.user16 = fread(id, 1, 'float');  % rhuser16 +-3.40282e38 
hdr.rdb.user17 = fread(id, 1, 'float');  % rhuser17 +-3.40282e38 
hdr.rdb.user18 = fread(id, 1, 'float');  % rhuser18 +-3.40282e38 
hdr.rdb.user19 = fread(id, 1, 'float');  % rhuser19 +-3.40282e38 

hdr.rdb.v_type = fread(id, 1, 'long');  % rhvtype bit mask 31 bits 
hdr.rdb.v_coefxa = fread(id, 1, 'float');  % RX x flow direction control 0 - 4 
hdr.rdb.v_coefxb = fread(id, 1, 'float');  % RX x flow direction control 0 - 4 
hdr.rdb.v_coefxc = fread(id, 1, 'float');  % RX x flow direction control 0 - 4 
hdr.rdb.v_coefxd = fread(id, 1, 'float');  % RX x flow direction control 0 - 4 
hdr.rdb.v_coefya = fread(id, 1, 'float');  % RX y flow direction control 0 - 4 
hdr.rdb.v_coefyb = fread(id, 1, 'float');  % RX y flow direction control 0 - 4 
hdr.rdb.v_coefyc = fread(id, 1, 'float');  % RX y flow direction control 0 - 4 
hdr.rdb.v_coefyd = fread(id, 1, 'float');  % RX y flow direction control 0 - 4 
hdr.rdb.v_coefza = fread(id, 1, 'float');  % RX z flow direction control 0 - 4 
hdr.rdb.v_coefzb = fread(id, 1, 'float');  % RX z flow direction control 0 - 4 
hdr.rdb.v_coefzc = fread(id, 1, 'float');  % RX z flow direction control 0 - 4 
hdr.rdb.v_coefzd = fread(id, 1, 'float');  % RX z flow direction control 0 - 4 
hdr.rdb.vm_coef1 = fread(id, 1, 'float');  % RX weight for mag image 1 0 - 1 
hdr.rdb.vm_coef2 = fread(id, 1, 'float');  % RX weight for mag image 2 0 - 1 
hdr.rdb.vm_coef3 = fread(id, 1, 'float');  % RX weight for mag image 3 0 - 1 
hdr.rdb.vm_coef4 = fread(id, 1, 'float');  % RX weight for mag image 4 0 - 1 
hdr.rdb.v_venc = fread(id, 1, 'float');  % RX vel encodeing cm / sec 0.001 - 5000 

hdr.rdb.spectral_width = fread(id, 1, 'float');  % specwidth filter width kHz 500 - 3355432 
hdr.rdb.csi_dims = fread(id, 1, 'short');  % spectro 
hdr.rdb.xcsi = fread(id, 1, 'short');  % rhspecrescsix 2 - 64 
hdr.rdb.ycsi = fread(id, 1, 'short');  % rhspecrescsiy 2 - 64 
hdr.rdb.zcsi = fread(id, 1, 'short');  % spectro 
hdr.rdb.roilenx = fread(id, 1, 'float');  % RX x csi volume dimension 
hdr.rdb.roileny = fread(id, 1, 'float');  % RX y csi volume dimension 
hdr.rdb.roilenz = fread(id, 1, 'float');  % RX z csi volume dimension 
hdr.rdb.roilocx = fread(id, 1, 'float');  % RX x csi volume center 
hdr.rdb.roilocy = fread(id, 1, 'float');  % RX y csi volume center 
hdr.rdb.roilocz = fread(id, 1, 'float');  % RX z csi volume center 
hdr.rdb.numdwell = fread(id, 1, 'float');  % specdwells 0 - 3.40282e38

hdr.rdb.ps_command = fread(id, 1, 'long');  % PS internal use only 
hdr.rdb.ps_mps_r1 = fread(id, 1, 'long');  % PS MPS R1 setting 1 - 7 
hdr.rdb.ps_mps_r2 = fread(id, 1, 'long');  % PS MPS R2 setting 1 - 30 
hdr.rdb.ps_mps_tg = fread(id, 1, 'long');  % PS MPS Transmit gain setting 0 - 200
hdr.rdb.ps_mps_freq = fread(id, 1, 'long');  % PS MPS Center frequency hz +-3.40282e38 
hdr.rdb.ps_aps_r1 = fread(id, 1, 'long');  % PS APS R1 setting 1 - 7 
hdr.rdb.ps_aps_r2 = fread(id, 1, 'long');  % PS APS R2 setting 1 - 30 
hdr.rdb.ps_aps_tg = fread(id, 1, 'long');  % PS APS Transmit gain setting 0 - 200
hdr.rdb.ps_aps_freq = fread(id, 1, 'long');  % PS APS Center frequency hz +-3.40282e38 
hdr.rdb.ps_scalei = fread(id, 1, 'float');  % PS rational scaling +-3.40282e38 
hdr.rdb.ps_scaleq = fread(id, 1, 'float');  % PS unused 
hdr.rdb.ps_snr_warning = fread(id, 1, 'long');  % PS noise test 0=16 1=32 bits 0, 1 
hdr.rdb.ps_aps_or_mps = fread(id, 1, 'long');  % PS prescan order logic 0 - 5 
hdr.rdb.ps_mps_bitmap = fread(id, 1, 'long');  % PS bit mask 4 bits
hdr.rdb.ps_powerspec = fread(id, 256, '*char')';  % PS 
hdr.rdb.ps_filler1 = fread(id, 1, 'long');  % PS filler 
hdr.rdb.ps_filler2 = fread(id, 1, 'long');  % PS filler 
hdr.rdb.rec_noise_mean = fread(id, 16, 'float');  % PS mean noise each receiver +-3.40282e38 
hdr.rdb.rec_noise_std = fread(id, 16, 'float');  % PS noise calc for muti rec +-3.40282e38 

hdr.rdb.halfecho = fread(id, 1, 'short');  % spectro full, half echo 0, 1 

hdr.rdb.im_size_y = fread(id, 1, 'short');  % rh???? 0 - 512 
hdr.rdb.data_collect_type1 = fread(id, 1, 'long');  % rh???? bit mask 31 bits 
hdr.rdb.freq_scale = fread(id, 1, 'float');  % rh???? freq k-space step +-3.40282e38 
hdr.rdb.phase_scale = fread(id, 1, 'float');  % rh???? freq k-space step +-3.40282e38 
hdr.rdb.ovl = fread(id, 1, 'short');  % rhovl - overlaps for MOTSA 

hdr.rdb.pclin = fread(id, 1, 'short');  % Linear Corr. 0:off, 1:linear, 2:polynomial 
hdr.rdb.pclinnpts = fread(id, 1, 'short');  % fit number of points 
hdr.rdb.pclinorder = fread(id, 1, 'short');  % fit order 
hdr.rdb.pclinavg = fread(id, 1, 'short');  % linear phase corr avg 0:off, 1:on 
hdr.rdb.pccon = fread(id, 1, 'short');  % Const Corr. 0:off, 1:Ky spec., 2:polyfit(2/ilv), 3:polyfit(1/ilv) 
hdr.rdb.pcconnpts = fread(id, 1, 'short');  % fit number of points 
hdr.rdb.pcconorder = fread(id, 1, 'short');  % fit order 
hdr.rdb.pcextcorr = fread(id, 1, 'short');  % external correction file 0:don't use, 1: use 
hdr.rdb.pcgraph = fread(id, 1, 'short');  % Phase Correction coef. image 0:off, 1:linear & constant 
hdr.rdb.pcileave = fread(id, 1, 'short');  % Interleaves to use for correction: 0=all, 1=only first 
hdr.rdb.hdbestky = fread(id, 1, 'short');  % bestky view for fractional Ky scan 
hdr.rdb.pcctrl = fread(id, 1, 'short');  % phase correction research control 
hdr.rdb.pcthrespts = fread(id, 1, 'short');  % 2..512 adjacent points 
hdr.rdb.pcdiscbeg = fread(id, 1, 'short');  % 0..512 beginning point to discard 
hdr.rdb.pcdiscmid = fread(id, 1, 'short');  % 0..512 middle point to discard 
hdr.rdb.pcdiscend = fread(id, 1, 'short');  % 0..512 ending point to discard 
hdr.rdb.pcthrespct = fread(id, 1, 'short');  % Threshold percentage 
hdr.rdb.pcspacial = fread(id, 1, 'short');  % Spacial best ref scan index 0..512 
hdr.rdb.pctemporal = fread(id, 1, 'short');  % Temporal best ref scan index 0..512 
hdr.rdb.pcspare = fread(id, 1, 'short');  % spare for phase correction 
hdr.rdb.ileaves = fread(id, 1, 'short');  % Number of interleaves 
hdr.rdb.kydir = fread(id, 1, 'short');  % Ky traversal dircetion 0: top-down, 1:center out 
hdr.rdb.alt = fread(id, 1, 'short');  % Alt read sign 0=no, 1=odd/even, 2=pairs 
hdr.rdb.reps = fread(id, 1, 'short');  % Number of scan repetitions 
hdr.rdb.ref = fread(id, 1, 'short');  % Ref Scan 0: off 1: on 

hdr.rdb.pcconnorm = fread(id, 1, 'float');  % Constant S term normalization factor 
hdr.rdb.pcconfitwt = fread(id, 1, 'float');  % Constant polyfit weighting factor 
hdr.rdb.pclinnorm = fread(id, 1, 'float');  % Linear S term normalization factor 
hdr.rdb.pclinfitwt = fread(id, 1, 'float');  % Linear polyfit weighting factor 
hdr.rdb.pcbestky = fread(id, 1, 'float');  % Best Ky location 

hdr.rdb.vrgf = fread(id, 1, 'long');  % control word for VRG filter 
hdr.rdb.vrgfxres = fread(id, 1, 'long');  % control word for VRGF final x resolution 

hdr.rdb.bp_corr = fread(id, 1, 'long');  % control word for bandpass asymmetry 
hdr.rdb.recv_freq_s = fread(id, 1, 'float');  % starting frequency (+62.5) 
hdr.rdb.recv_freq_e = fread(id, 1, 'float');  % ending frequency (-62.5) 
hdr.rdb.hniter = fread(id, 1, 'long');  % Selects the number of (continued...)
hdr.rdb.fast_rec = fread(id, 1, 'long');  % Added for homodyne II, tells if (continued...)
hdr.rdb.refframes = fread(id, 1, 'long');  % total # of frames for ref scan 
hdr.rdb.refframep = fread(id, 1, 'long');  % # of frames per pass for a ref scan 
hdr.rdb.scnframe = fread(id, 1, 'long');  % total # of frames for a entire scan 
hdr.rdb.pasframe = fread(id, 1, 'long');  % # of frames per pass 

hdr.rdb.user_usage_tag = fread(id, 1, 'ulong');  % for spectro 
hdr.rdb.user_fill_mapMSW = fread(id, 1, 'ulong');  % for spectro 
hdr.rdb.user_fill_mapLSW = fread(id, 1, 'ulong');  % for Spectro 

hdr.rdb.user20 = fread(id, 1, 'float');  % all following usercv are for spectro 
hdr.rdb.user21 = fread(id, 1, 'float');  
hdr.rdb.user22 = fread(id, 1, 'float');  
hdr.rdb.user23 = fread(id, 1, 'float');  
hdr.rdb.user24 = fread(id, 1, 'float');  
hdr.rdb.user25 = fread(id, 1, 'float');  
hdr.rdb.user26 = fread(id, 1, 'float');  
hdr.rdb.user27 = fread(id, 1, 'float');  
hdr.rdb.user28 = fread(id, 1, 'float');  
hdr.rdb.user29 = fread(id, 1, 'float');  
hdr.rdb.user30 = fread(id, 1, 'float');  
hdr.rdb.user31 = fread(id, 1, 'float');  
hdr.rdb.user32 = fread(id, 1, 'float');  
hdr.rdb.user33 = fread(id, 1, 'float');  
hdr.rdb.user34 = fread(id, 1, 'float');  
hdr.rdb.user35 = fread(id, 1, 'float');  
hdr.rdb.user36 = fread(id, 1, 'float');  
hdr.rdb.user37 = fread(id, 1, 'float');  
hdr.rdb.user38 = fread(id, 1, 'float');  
hdr.rdb.user39 = fread(id, 1, 'float');  
hdr.rdb.user40 = fread(id, 1, 'float');  
hdr.rdb.user41 = fread(id, 1, 'float');  
hdr.rdb.user42 = fread(id, 1, 'float');  
hdr.rdb.user43 = fread(id, 1, 'float');  
hdr.rdb.user44 = fread(id, 1, 'float');  
hdr.rdb.user45 = fread(id, 1, 'float');  
hdr.rdb.user46 = fread(id, 1, 'float');  
hdr.rdb.user47 = fread(id, 1, 'float');  
hdr.rdb.user48 = fread(id, 1, 'float');  

hdr.rdb.pcfitorig = fread(id, 1, 'short');  % Adjust view indexes if set so bestky view = 0 
hdr.rdb.pcshotfirst = fread(id, 1, 'short');  % First view within an echo group used for fit 
hdr.rdb.pcshotlast = fread(id, 1, 'short');  % Last view within an echo group used for fit 
hdr.rdb.pcmultegrp = fread(id, 1, 'short');  % If = 1, force pts from other egrps to be used 
hdr.rdb.pclinfix = fread(id, 1, 'short');  % If = 2, force slope to be set to pclinslope 
hdr.rdb.pcconfix = fread(id, 1, 'short');  % If = 2, force slope to be set to pcconslope 
hdr.rdb.pclinslope = fread(id, 1, 'float');  % Value to set lin slope to if forced 
hdr.rdb.pcconslope = fread(id, 1, 'float');  % Value to set con slope to if forced 
hdr.rdb.pccoil = fread(id, 1, 'short');  % If 1,2,3,4, use that coil's results for all 

hdr.rdb.vvsmode = fread(id, 1, 'short');  % Variable view sharing mode 
hdr.rdb.vvsaimgs = fread(id, 1, 'short');  % number of original images 
hdr.rdb.vvstr = fread(id, 1, 'short');  % TR in microseconds 
hdr.rdb.vvsgender = fread(id, 1, 'short');  % gender: male or female 
hdr.rdb.zip_factor = fread(id, 1, 'short');  % Slice ZIP factor: 0=OFF, 2, or 4 
hdr.rdb.maxcoef1a = fread(id, 1, 'float');  % Coefficient A for flow image 1 
hdr.rdb.maxcoef1b = fread(id, 1, 'float');  % Coefficient B for flow image 1 
hdr.rdb.maxcoef1c = fread(id, 1, 'float');  % Coefficient C for flow image 1 
hdr.rdb.maxcoef1d = fread(id, 1, 'float');  % Coefficient D for flow image 1 
hdr.rdb.maxcoef2a = fread(id, 1, 'float');  % Coefficient A for flow image 2 
hdr.rdb.maxcoef2b = fread(id, 1, 'float');  % Coefficient B for flow image 2 
hdr.rdb.maxcoef2c = fread(id, 1, 'float');  % Coefficient C for flow image 2 
hdr.rdb.maxcoef2d = fread(id, 1, 'float');  % Coefficient D for flow image 2 
hdr.rdb.maxcoef3a = fread(id, 1, 'float');  % Coefficient A for flow image 3 
hdr.rdb.maxcoef3b = fread(id, 1, 'float');  % Coefficient B for flow image 3 
hdr.rdb.maxcoef3c = fread(id, 1, 'float');  % Coefficient C for flow image 3 
hdr.rdb.maxcoef3d = fread(id, 1, 'float');  % Coefficient D for flow image 3 
hdr.rdb.ut_ctrl = fread(id, 1, 'long');  % System utility control variable 
hdr.rdb.dp_type = fread(id, 1, 'short');  % EPI II diffusion control cv 
hdr.rdb.arw = fread(id, 1, 'short');  % Arrhythmia rejection window(percentage:1-100)
hdr.rdb.vps = fread(id, 1, 'short');  % View Per Segment for FastCine 
hdr.rdb.mcReconEnable = fread(id, 1, 'short');  % N-Coil recon map 
hdr.rdb.fov = fread(id, 1, 'float');  % Auto-NCoil 
hdr.rdb.te = fread(id, 1, 'long');  % TE for first echo 
hdr.rdb.te2 = fread(id, 1, 'long');  % TE for second and later echoes 
hdr.rdb.dfmrbw = fread(id, 1, 'float');  % BW for navigator frames 
hdr.rdb.dfmctrl = fread(id, 1, 'long');  % Control flag for dfm (0=off, other=on)
hdr.rdb.raw_nex = fread(id, 1, 'long');  % Uncombined NEX at start of recon 
hdr.rdb.navs_per_pass = fread(id, 1, 'long');  % Max. navigator frames in a pass 
hdr.rdb.dfmxres = fread(id, 1, 'long');  % xres of navigator frames 
hdr.rdb.dfmptsize = fread(id, 1, 'long');  % point size of navigator frames 
hdr.rdb.navs_per_view = fread(id, 1, 'long');  % Num. navigators per frame (tag table) 
hdr.rdb.dfmdebug = fread(id, 1, 'long');  % control flag for dfm debug 
hdr.rdb.dfmthreshold = fread(id, 1, 'float');  % threshold for navigator correction 
hdr.rdb.grid_control = fread(id, 1, 'short');  % bit settings controlling gridding 
hdr.rdb.b0map = fread(id, 1, 'short');  % B0 map enable and map size 
hdr.rdb.grid_tediff = fread(id, 1, 'short');  % TE difference between b0 map arms 
hdr.rdb.grid_motion_comp = fread(id, 1, 'short');  % flag to apply motion compensation 
hdr.rdb.grid_radius_a = fread(id, 1, 'float');  % variable density transition 
hdr.rdb.grid_radius_b = fread(id, 1, 'float');  % variable density transition 
hdr.rdb.grid_max_gradient = fread(id, 1, 'float');  % Max gradient amplitude 
hdr.rdb.grid_max_slew = fread(id, 1, 'float');  % Max slew rate 
hdr.rdb.grid_scan_fov = fread(id, 1, 'float');  % Rx scan field of view 
hdr.rdb.grid_a2d_time = fread(id, 1, 'float');  % A to D sample time microsecs 
hdr.rdb.grid_density_factor = fread(id, 1, 'float');  % change factor for variable density 
hdr.rdb.grid_display_fov = fread(id, 1, 'float');  % Rx display field of view 
hdr.rdb.fatwater = fread(id, 1, 'short');  % for Fat and Water Dual Recon 
hdr.rdb.fiestamlf = fread(id, 1, 'short');  % MFO FIESTA recon control bit 16bits 
hdr.rdb.app = fread(id, 1, 'short');  % Auto Post-Processing opcode 
hdr.rdb.rhncoilsel = fread(id, 1, 'short');  % Auto-Ncoil 
hdr.rdb.rhncoillimit = fread(id, 1, 'short');  % Auto-Ncoil 
hdr.rdb.app_option = fread(id, 1, 'short');  % Auto Post_processing options 
hdr.rdb.grad_mode = fread(id, 1, 'short');  % Gradient mode in Gemini project 
hdr.rdb.pfile_passes = fread(id, 1, 'short');  % Num passes stored in a multi-pass Pfile (0 means 1 pass) 
hdr.rdb.asset = fread(id, 1, 'int');  
hdr.rdb.asset_calthresh = fread(id, 1, 'int');  
hdr.rdb.asset_R = fread(id, 1, 'float');  
hdr.rdb.coilno = fread(id, 1, 'int');  
hdr.rdb.asset_phases = fread(id, 1, 'int');  
hdr.rdb.scancent = fread(id, 1, 'float');  % Table position 
hdr.rdb.position = fread(id, 1, 'int');  % Patient position 
hdr.rdb.entry = fread(id, 1, 'int');  % Patient entry 
hdr.rdb.lmhor = fread(id, 1, 'float');  % Landmark 
hdr.rdb.last_slice_num = fread(id, 1, 'int');   
hdr.rdb.asset_slice_R = fread(id, 1, 'float');  % Slice reduction factor 
hdr.rdb.asset_slabwrap = fread(id, 1, 'float');  
hdr.rdb.dwnav_coeff = fread(id, 1, 'float');  % Coeff for amount of phase correction 
hdr.rdb.dwnav_cor = fread(id, 1, 'short');  % Navigator echo correction 
hdr.rdb.dwnav_view = fread(id, 1, 'short');  % Num of views of nav echoes 
hdr.rdb.dwnav_corecho = fread(id, 1, 'short');  % Num of nav echoes for actual correction 
hdr.rdb.dwnav_sview = fread(id, 1, 'short');  % Start view for phase correction process 
hdr.rdb.dwnav_eview = fread(id, 1, 'short');  % End view for phase correction process 
hdr.rdb.dwnav_sshot = fread(id, 1, 'short');  % Start shot for delta phase estimation in nav echoes 
hdr.rdb.dwnav_eshot = fread(id, 1, 'short');  % End shot for delta phase estimation in nav echoes 
hdr.rdb.win3d_type = fread(id, 1, 'short');  % 0 = Modified Hanning, 1 = modified Tukey 
hdr.rdb.win3d_apod = fread(id, 1, 'float');  % degree of apodization; 0.0 = boxcar, 1.0=hanning 
hdr.rdb.win3d_q = fread(id, 1, 'float');  % apodization at ends, 0.0 = max, 1.0 = boxcar 
hdr.rdb.ime_scic_enable = fread(id, 1, 'short');  % Surface Coil Intensity Correction: 1 if enabled 
hdr.rdb.clariview_type = fread(id, 1, 'short');  % Type of Clariview/Name of Filter 
hdr.rdb.ime_scic_edge = fread(id, 1, 'float');  % Edge paramaters for Enhanced Recon 
hdr.rdb.ime_scic_smooth = fread(id, 1, 'float');  % Smooth paramaters for Enhanced Recon 
hdr.rdb.ime_scic_focus = fread(id, 1, 'float');  % Focus paramaters for Enhanced Recon 
hdr.rdb.clariview_edge = fread(id, 1, 'float');  % Edge paramaters for clariview 
hdr.rdb.clariview_smooth = fread(id, 1, 'float');  % Smooth paramaters for clariview 
hdr.rdb.clariview_focus = fread(id, 1, 'float');  % Focus paramaters for clariview 
hdr.rdb.scic_reduction = fread(id, 1, 'float');  % Reduction paramater for SCIC 
hdr.rdb.scic_gauss = fread(id, 1, 'float');  % Gauss paramater for SCIC 
hdr.rdb.scic_threshold = fread(id, 1, 'float');  % Threshold paramater for SCIC 
hdr.rdb.ectricks_no_regions = fread(id, 1, 'long');  % Total no of regions acquired by PSD 
hdr.rdb.ectricks_input_regions = fread(id, 1, 'long');  % Total no of input regions for reordering 
hdr.rdb.psc_reuse = fread(id, 1, 'short');  % Header field for smart prescan 
hdr.rdb.left_blank = fread(id, 1, 'short');  
hdr.rdb.right_blank = fread(id, 1, 'short');  
hdr.rdb.acquire_type = fread(id, 1, 'short');  % Acquire type information from CV 
hdr.rdb.retro_control = fread(id, 1, 'short');  % Retrosective FSE phase correction control flag. (continued...)
hdr.rdb.etl = fread(id, 1, 'short');  % Added for Retrospective FSE phase correction. This (continued...)
hdr.rdb.pcref_start = fread(id, 1, 'short');  % 1st view to use for dynamic EPI phase correction. 
hdr.rdb.pcref_stop = fread(id, 1, 'short');  % Last view to use for dynamic EPI phase correction. 
hdr.rdb.ref_skip = fread(id, 1, 'short');  % Number of passes to skip for dynamic EPI phase correction. 
hdr.rdb.extra_frames_top = fread(id, 1, 'short');  % Number of extra frames at top of K-space 
hdr.rdb.extra_frames_bot = fread(id, 1, 'short');  % Number of extra frames at bottom of K-space 
hdr.rdb.multiphase_type = fread(id, 1, 'short');  % 0 = INTERLEAVED , 1 = SEQUENTIAL 
hdr.rdb.nphases = fread(id, 1, 'short');  % Number of phases in a multiphase scan 
hdr.rdb.pure = fread(id, 1, 'short');  % PURE flag from psd 
hdr.rdb.pure_scale = fread(id, 1, 'float');  % Recon scale factor ratio for cal scan 
hdr.rdb.off_data = fread(id, 1, 'int');  % Byte offset to start of raw data (i.e size of POOL_HEADER) 
hdr.rdb.size = hdr.rdb.off_data;
hdr.rdb.off_per_pass = fread(id, 1, 'int');  % Byte offset to start of rdb_hdr_per_pass of POOL_HEADER 
hdr.rdb.off_unlock_raw = fread(id, 1, 'int');  % Byte offset to start of rdb_hdr_unlock_raw of POOL_HEADER 
hdr.rdb.off_data_acq_tab = fread(id, 1, 'int');  % Byte offset to start of rdb_hdr_data_acq_tab of POOL_HEADER 
hdr.rdb.off_nex_tab = fread(id, 1, 'int');  % Byte offset to start of rdb_hdr_nex_tab of POOL_HEADER 
hdr.rdb.off_nex_abort_tab = fread(id, 1, 'int');  % Byte offset to start of rdb_hdr_nex_abort_tab of POOL_HEADER 
hdr.rdb.off_tool = fread(id, 1, 'int');  % Byte offset to start of rdb_hdr_tool of POOL_HEADER 
hdr.rdb.off_exam = fread(id, 1, 'int');  % Byte offset to start of rdb_hdr_exam of POOL_HEADER 
hdr.rdb.off_series = fread(id, 1, 'int');  % Byte offset to start of rdb_hdr_series of POOL_HEADER 
hdr.rdb.off_image = fread(id, 1, 'int');  % Byte offset to start of rdb_hdr_image of POOL_HEADER 
hdr.rdb.off_spare_a = fread(id, 1, 'int');  % spare 
hdr.rdb.off_spare_b = fread(id, 1, 'int');  % spare 
hdr.rdb.new_wnd_level_flag = fread(id, 1, 'int');  % New WW/WL algo enable/disable flag 
hdr.rdb.wnd_image_hist_area = fread(id, 1, 'int');  % Image Area % 
hdr.rdb.wnd_high_hist = fread(id, 1, 'float');  % Histogram Area Top 
hdr.rdb.wnd_lower_hist = fread(id, 1, 'float');  % Histogram Area Bottom 
hdr.rdb.pure_filter = fread(id, 1, 'short');  % PURE noise reduction on=1/off=0 
hdr.rdb.cfg_pure_filter = fread(id, 1, 'short');  % PURE cfg file value 
hdr.rdb.cfg_pure_fit_order = fread(id, 1, 'short');  % PURE cfg file value 
hdr.rdb.cfg_pure_kernelsize_z = fread(id, 1, 'short');  % PURE cfg file value 
hdr.rdb.cfg_pure_kernelsize_xy = fread(id, 1, 'short');  % PURE cfg file value 
hdr.rdb.cfg_pure_weight_radius = fread(id, 1, 'short');  % PURE cfg file value 
hdr.rdb.cfg_pure_intensity_scale = fread(id, 1, 'short');  % PURE cfg file value 
hdr.rdb.cfg_pure_noise_threshold = fread(id, 1, 'short');  % PURE cfg file value 
hdr.rdb.wienera = fread(id, 1, 'float');  % NB maintain alignment of floats 
hdr.rdb.wienerb = fread(id, 1, 'float');  
hdr.rdb.wienert2 = fread(id, 1, 'float');  
hdr.rdb.wieneresp = fread(id, 1, 'float');  
hdr.rdb.wiener = fread(id, 1, 'short');  
hdr.rdb.flipfilter = fread(id, 1, 'short');  
hdr.rdb.dbgrecon = fread(id, 1, 'short');  
hdr.rdb.ech2skip = fread(id, 1, 'short');  
hdr.rdb.tricks_type = fread(id, 1, 'int');  % 0 = Subtracted, 1 = Unsubtracted 
hdr.rdb.lcfiesta_phase = fread(id, 1, 'float');  % LC Fiesta 
hdr.rdb.lcfiesta = fread(id, 1, 'short');  % LC Fiesta 
hdr.rdb.herawflt = fread(id, 1, 'short');  % Half echo raw data filter 
hdr.rdb.herawflt_befnwin = fread(id, 1, 'short');  % Half echo raw data filter 
hdr.rdb.herawflt_befntran = fread(id, 1, 'short');  % Half echo raw data filter 
hdr.rdb.herawflt_befamp = fread(id, 1, 'float');  % Half echo raw data filter 
hdr.rdb.herawflt_hpfamp = fread(id, 1, 'float');  % Half echo raw data filter 
hdr.rdb.heover = fread(id, 1, 'short');  % Half echo over sampling 
hdr.rdb.pure_correction_threshold = fread(id, 1, 'short');  % PURE Correction threshold 
hdr.rdb.excess = fread(id, 224, 'short');  % free space for later expansion 
hdr.per_pass = fread(id, 4096, 'char');  % lumped type RDB_PER_PASS_TAB
hdr.unlock_raw = fread(id, 4096, 'char');  % lumped type RDB_PER_PASS_TAB
for islice=[1:1024]  % kluge for type RDB_SLICE_INFO_ENTRY
  hdr.data_acq_tab(islice).pass_number = fread(id, 1, 'short');  % which pass this slice is in
  hdr.data_acq_tab(islice).slice_in_pass = fread(id, 1, 'short');  % which slice in this pass
  hdr.data_acq_tab(islice).gw_point = fread(id, [3,3], 'float');  % corner points of image
end
hdr.nex_tab = fread(id, 2052, 'char');  % lumped type RDB_NEX_TYPE
hdr.nex_abort_tab = fread(id, 2052, 'char');  % lumped type RDB_NEX_TYPE
hdr.tool = fread(id, 2048, 'char');  % lumped type TOOLSDATA
hdr.exam.firstaxtime = fread(id, 1, 'double');  % Start time(secs) of first axial in exam
hdr.exam.ex_series = fread(id, 1, 'ulong');  % kluge for type VARTYPE
fseek(id, 4, 0);  % kluge for type VARTYPE
hdr.exam.ex_unseries = fread(id, 1, 'ulong');  % kluge for type VARTYPE
fseek(id, 4, 0);  % kluge for type VARTYPE
hdr.exam.ex_toarchive = fread(id, 1, 'ulong');  % kluge for type VARTYPE
fseek(id, 4, 0);  % kluge for type VARTYPE
hdr.exam.ex_prosp = fread(id, 1, 'ulong');  % kluge for type VARTYPE
fseek(id, 4, 0);  % kluge for type VARTYPE
hdr.exam.ex_models = fread(id, 1, 'ulong');  % kluge for type VARTYPE
fseek(id, 4, 0);  % kluge for type VARTYPE
hdr.exam.zerocell = fread(id, 1, 'float');  % Cell number at theta
hdr.exam.cellspace = fread(id, 1, 'float');  % Cell spacing
hdr.exam.srctodet = fread(id, 1, 'float');  % Distance from source to detector
hdr.exam.srctoiso = fread(id, 1, 'float');  % Distance from source to iso
hdr.exam.ex_delta_cnt = fread(id, 1, 'long');  % Indicates number of updates to header
hdr.exam.ex_complete = fread(id, 1, 'long');  % Exam Complete Flag
hdr.exam.ex_seriesct = fread(id, 1, 'long');  % Last Series Number Used
hdr.exam.ex_numarch = fread(id, 1, 'long');  % Number of Series Archived
hdr.exam.ex_numseries = fread(id, 1, 'long');  % Number of Series Existing
hdr.exam.ex_numunser = fread(id, 1, 'long');  % Number of Unstored Series
hdr.exam.ex_toarchcnt = fread(id, 1, 'long');  % Number of Unarchived Series
hdr.exam.ex_prospcnt = fread(id, 1, 'long');  % Number of Prospective/Scout Series
hdr.exam.ex_modelnum = fread(id, 1, 'long');  % Last Model Number used
hdr.exam.ex_modelcnt = fread(id, 1, 'long');  % Number of ThreeD Models
hdr.exam.ex_checksum = fread(id, 1, 'ulong');  % Exam Record Checksum
hdr.exam.numcells = fread(id, 1, 'int');  % Number of cells in det
hdr.exam.magstrength = fread(id, 1, 'int');  % Magnet strength (in gauss)
hdr.exam.patweight = fread(id, 1, 'int');  % Patient Weight
hdr.exam.ex_datetime = fread(id, 1, 'int');  % Exam date/time stamp
hdr.exam.ex_lastmod = fread(id, 1, 'int');  % Date/Time of Last Change
hdr.exam.ex_no = fread(id, 1, 'ushort');  % Exam Number
hdr.exam.ex_uniq = fread(id, 1, 'short');  % The Make-Unique Flag
hdr.exam.detect = fread(id, 1, 'short');  % Detector Type
hdr.exam.tubetyp = fread(id, 1, 'short');  % Tube type
hdr.exam.dastyp = fread(id, 1, 'short');  % DAS type
hdr.exam.num_dcnk = fread(id, 1, 'short');  % Number of Decon Kernals
hdr.exam.dcn_len = fread(id, 1, 'short');  % Number of elements in a Decon Kernal
hdr.exam.dcn_density = fread(id, 1, 'short');  % Decon Kernal density
hdr.exam.dcn_stepsize = fread(id, 1, 'short');  % Decon Kernal stepsize
hdr.exam.dcn_shiftcnt = fread(id, 1, 'short');  % Decon Kernal Shift Count
hdr.exam.patage = fread(id, 1, 'short');  % Patient Age (years, months or days)
hdr.exam.patian = fread(id, 1, 'short');  % Patient Age Notation
hdr.exam.patsex = fread(id, 1, 'short');  % Patient Sex
hdr.exam.ex_format = fread(id, 1, 'short');  % Exam Format
hdr.exam.trauma = fread(id, 1, 'short');  % Trauma Flag
hdr.exam.protocolflag = fread(id, 1, 'short');  % Non-Zero indicates Protocol Exam
hdr.exam.study_status = fread(id, 1, 'short');  % indicates if study has complete info(DICOM/genesis)
hdr.exam.padding = fread(id, 3, 'short');  
hdr.exam.hist = fread(id, 61, '*char')';  % Patient History
hdr.exam.reqnum = fread(id, 13, '*char')';  % Requisition Number
hdr.exam.refphy = fread(id, 33, '*char')';  % Referring Physician
hdr.exam.diagrad = fread(id, 33, '*char')';  % Diagnostician/Radiologist
hdr.exam.op = fread(id, 4, '*char')';  % Operator
hdr.exam.ex_desc = fread(id, 65, '*char')';  % Exam Description
hdr.exam.ex_typ = fread(id, 3, '*char')';  % Exam Type
hdr.exam.ex_sysid = fread(id, 9, '*char')';  % Creator Suite and Host
hdr.exam.ex_alloc_key = fread(id, 13, '*char')';  % Process that allocated this record
hdr.exam.ex_diskid = fread(id, 1, '*char')';  % Disk ID for this Exam
hdr.exam.hospname = fread(id, 33, '*char')';  % Hospital Name
hdr.exam.patid = fread(id, 13, '*char')';  % Patient ID for this Exam
hdr.exam.patname = fread(id, 25, '*char')';  % Patient Name
hdr.exam.ex_suid = fread(id, 4, '*char')';  % Suite ID for this Exam
hdr.exam.ex_verscre = fread(id, 2, '*char')';  % Genesis Version - Created
hdr.exam.ex_verscur = fread(id, 2, '*char')';  % Genesis Version - Now
hdr.exam.uniq_sys_id = fread(id, 16, '*char')';  % Unique System ID
hdr.exam.service_id = fread(id, 16, '*char')';  % Unique Service ID
hdr.exam.mobile_loc = fread(id, 4, '*char')';  % Mobile Location Number
hdr.exam.study_uid = fread(id, 32, '*char')';  % Study Entity Unique ID
hdr.exam.refsopcuid = fread(id, 32, '*char')';  % Ref SOP Class UID 
hdr.exam.refsopiuid = fread(id, 32, '*char')';  % Ref SOP Instance UID 
hdr.exam.patnameff = fread(id, 65, '*char')';  % FF Patient Name 
hdr.exam.patidff = fread(id, 65, '*char')';  % FF Patient ID 
hdr.exam.reqnumff = fread(id, 17, '*char')';  % FF Requisition No 
hdr.exam.dateofbirth = fread(id, 9, '*char')';  % Date of Birth 
hdr.exam.mwlstudyuid = fread(id, 32, '*char')';  % Genesis Exam UID 
hdr.exam.mwlstudyid = fread(id, 16, '*char')';  % Genesis Exam No 
hdr.exam.ex_padding = fread(id, 222, '*char')';  % Spare Space
hdr.series.se_images = fread(id, 1, 'ulong');  % kluge for type VARTYPE
fseek(id, 4, 0);  % kluge for type VARTYPE
hdr.series.se_unimages = fread(id, 1, 'ulong');  % kluge for type VARTYPE
fseek(id, 4, 0);  % kluge for type VARTYPE
hdr.series.se_toarchive = fread(id, 1, 'ulong');  % kluge for type VARTYPE
fseek(id, 4, 0);  % kluge for type VARTYPE
hdr.series.se_pds_a = fread(id, 1, 'float');  % PixelData size - as stored
hdr.series.se_pds_c = fread(id, 1, 'float');  % PixelData size - Compressed
hdr.series.se_pds_u = fread(id, 1, 'float');  % PixelData size - UnCompressed
hdr.series.lmhor = fread(id, 1, 'float');  % Horizontal Landmark
hdr.series.start_loc = fread(id, 1, 'float');  % First scan location (L/S)
hdr.series.end_loc = fread(id, 1, 'float');  % Last scan location (L/S)
hdr.series.echo1_alpha = fread(id, 1, 'float');  % Echo 1 Alpha Value
hdr.series.echo1_beta = fread(id, 1, 'float');  % Echo 1 Beta Value
hdr.series.echo2_alpha = fread(id, 1, 'float');  % Echo 2 Alpha Value
hdr.series.echo2_beta = fread(id, 1, 'float');  % Echo 2 Beta Value
hdr.series.echo3_alpha = fread(id, 1, 'float');  % Echo 3 Alpha Value
hdr.series.echo3_beta = fread(id, 1, 'float');  % Echo 3 Beta Value
hdr.series.echo4_alpha = fread(id, 1, 'float');  % Echo 4 Alpha Value
hdr.series.echo4_beta = fread(id, 1, 'float');  % Echo 4 Beta Value
hdr.series.echo5_alpha = fread(id, 1, 'float');  % Echo 5 Alpha Value
hdr.series.echo5_beta = fread(id, 1, 'float');  % Echo 5 Beta Value
hdr.series.echo6_alpha = fread(id, 1, 'float');  % Echo 6 Alpha Value
hdr.series.echo6_beta = fread(id, 1, 'float');  % Echo 6 Beta Value
hdr.series.echo7_alpha = fread(id, 1, 'float');  % Echo 7 Alpha Value
hdr.series.echo7_beta = fread(id, 1, 'float');  % Echo 7 Beta Value
hdr.series.echo8_alpha = fread(id, 1, 'float');  % Echo 8 Alpha Value
hdr.series.echo8_beta = fread(id, 1, 'float');  % Echo 8 Beta Value
hdr.series.se_checksum = fread(id, 1, 'ulong');  % Series Record checksum
hdr.series.se_complete = fread(id, 1, 'long');  % Series Complete Flag
hdr.series.se_numarch = fread(id, 1, 'long');  % Number of Images Archived
hdr.series.se_imagect = fread(id, 1, 'long');  % Last Image Number Used
hdr.series.se_numimages = fread(id, 1, 'long');  % Number of Images Existing
hdr.series.se_delta_cnt = fread(id, 1, 'long');  % Indicates number of updates to header
hdr.series.se_numunimg = fread(id, 1, 'long');  % Number of Unstored Images
hdr.series.se_toarchcnt = fread(id, 1, 'long');  % Number of Unarchived Images
hdr.series.se_datetime = fread(id, 1, 'int');  % Allocation Series Data/Time stamp
hdr.series.se_actual_dt = fread(id, 1, 'int');  % Actual Series Data/Time stamp
hdr.series.position = fread(id, 1, 'int');  % Patient Position
hdr.series.entry = fread(id, 1, 'int');  % Patient Entry
hdr.series.se_lndmrkcnt = fread(id, 1, 'int');  % Landmark Counter
hdr.series.se_lastmod = fread(id, 1, 'int');  % Date/Time of Last Change
hdr.series.ExpType = fread(id, 1, 'int');  
hdr.series.TrRest = fread(id, 1, 'int');  
hdr.series.TrActive = fread(id, 1, 'int');  
hdr.series.DumAcq = fread(id, 1, 'int');  
hdr.series.ExptTimePts = fread(id, 1, 'int');  
hdr.series.se_exno = fread(id, 1, 'ushort');  % Exam Number
hdr.series.echo1_window = fread(id, 1, 'ushort');  % Echo 1 Window Value
hdr.series.echo2_window = fread(id, 1, 'ushort');  % Echo 2 Window Value
hdr.series.echo3_window = fread(id, 1, 'ushort');  % Echo 3 Window Value
hdr.series.echo4_window = fread(id, 1, 'ushort');  % Echo 4 Window Value
hdr.series.echo5_window = fread(id, 1, 'ushort');  % Echo 5 Window Value
hdr.series.echo6_window = fread(id, 1, 'ushort');  % Echo 6 Window Value
hdr.series.echo7_window = fread(id, 1, 'ushort');  % Echo 7 Window Value
hdr.series.echo8_window = fread(id, 1, 'ushort');  % Echo 8 Window Value
hdr.series.echo8_level = fread(id, 1, 'short');  % Echo 8 Level Value
hdr.series.echo7_level = fread(id, 1, 'short');  % Echo 7 Level Value
hdr.series.echo6_level = fread(id, 1, 'short');  % Echo 6 Level Value
hdr.series.echo5_level = fread(id, 1, 'short');  % Echo 5 Level Value
hdr.series.echo4_level = fread(id, 1, 'short');  % Echo 4 Level Value
hdr.series.echo3_level = fread(id, 1, 'short');  % Echo 3 Level Value
hdr.series.echo2_level = fread(id, 1, 'short');  % Echo 2 Level Value
hdr.series.echo1_level = fread(id, 1, 'short');  % Echo 1 Level Value
hdr.series.se_no = fread(id, 1, 'short');  % Series Number
hdr.series.se_typ = fread(id, 1, 'short');  % Series Type
hdr.series.se_source = fread(id, 1, 'short');  % Series from which prescribed
hdr.series.se_plane = fread(id, 1, 'short');  % Most-like Plane (for L/S)
hdr.series.scan_type = fread(id, 1, 'short');  % Scout or Axial (for CT)
hdr.series.se_uniq = fread(id, 1, 'short');  % The Make-Unique Flag
hdr.series.se_contrast = fread(id, 1, 'short');  % Non-zero if > 0 image used contrast(L/S)
hdr.series.se_pseq = fread(id, 1, 'short');  % Last Pulse Sequence Used (L/S)
hdr.series.se_sortorder = fread(id, 1, 'short');  % Image Sort Order (L/S)
hdr.series.se_nacq = fread(id, 1, 'short');  % Number of Acquisitions
hdr.series.xbasest = fread(id, 1, 'short');  % Starting number for baselines
hdr.series.xbaseend = fread(id, 1, 'short');  % Ending number for baselines
hdr.series.xenhst = fread(id, 1, 'short');  % Starting number for enhanced scans
hdr.series.xenhend = fread(id, 1, 'short');  % Ending number for enhanced scans
hdr.series.table_entry = fread(id, 1, 'short');  % Table position for nMR and iMR
hdr.series.SwingAngle = fread(id, 1, 'short');  % nMR - Swing Angle
hdr.series.LateralOffset = fread(id, 1, 'short');  % nMR - Offset
hdr.series.GradientCoil = fread(id, 1, 'short');  % Gradient Coil Selection 
hdr.series.se_subtype = fread(id, 1, 'short');  % supplements se_typ, see DICOM (0008,0008) //GSAge04506 
hdr.series.BWRT = fread(id, 1, 'short');  % for fMRI till ExptTimePts 
hdr.series.assetcal_serno = fread(id, 1, 'short');  % Calibration Series number 
hdr.series.assetcal_scnno = fread(id, 1, 'short');  % Calibration Scan number
hdr.series.content_qualifn = fread(id, 1, 'short');  % PRODUCT/RESEARCH/SERVICE
hdr.series.purecal_serno = fread(id, 1, 'short');  % Calibration Series number
hdr.series.purecal_scnno = fread(id, 1, 'short');  % Calibration Scan number
hdr.series.short_padding = fread(id, 2, 'short');  
hdr.series.se_verscre = fread(id, 2, '*char')';  % Genesis Version - Created
hdr.series.se_verscur = fread(id, 2, '*char')';  % Genesis Version - Now
hdr.series.se_suid = fread(id, 4, '*char')';  % Suite ID for this Series
hdr.series.se_alloc_key = fread(id, 13, '*char')';  % Process that allocated this record
hdr.series.se_diskid = fread(id, 1, '*char')';  % Disk ID for this Series
hdr.series.se_desc = fread(id, 65, '*char')';  % Series Description
hdr.series.pr_sysid = fread(id, 9, '*char')';  % Primary Receiver Suite and Host
hdr.series.pansysid = fread(id, 9, '*char')';  % Archiver Suite and Host
hdr.series.anref = fread(id, 3, '*char')';  % Anatomical reference
hdr.series.prtcl = fread(id, 25, '*char')';  % Scan Protocol Name
hdr.series.start_ras = fread(id, 1, '*char')';  % RAS letter for first scan location (L/S)
hdr.series.end_ras = fread(id, 1, '*char')';  % RAS letter for last scan location (L/S)
hdr.series.series_uid = fread(id, 32, '*char')';  % Series Entity Unique ID
hdr.series.landmark_uid = fread(id, 32, '*char')';  % Landmark Unique ID
hdr.series.equipmnt_uid = fread(id, 32, '*char')';  % Equipment Unique ID
hdr.series.refsopcuids = fread(id, 32, '*char')';  % Ref SOP Class UID 
hdr.series.refsopiuids = fread(id, 32, '*char')';  % Ref SOP Instance UID 
hdr.series.schacitval = fread(id, 16, '*char')';  % Sched Proc Action Item Seq - Value 
hdr.series.schacitdesc = fread(id, 16, '*char')';  % Sched Proc Action Item Seq - Description 
hdr.series.schacitmea = fread(id, 64, '*char')';  % Sched Proc Action Item Seq - Meaning 
hdr.series.schprocstdesc = fread(id, 65, '*char')';  % Sched Proc Step Desc 
hdr.series.schprocstid = fread(id, 16, '*char')';  % Sched Proc Step ID 1
hdr.series.reqprocstid = fread(id, 16, '*char')';  % Req Proc Step ID 1
hdr.series.perprocstid = fread(id, 16, '*char')';  % PPS ID 
hdr.series.perprocstdesc = fread(id, 65, '*char')';  % PPS Description
hdr.series.reqprocstid2 = fread(id, 16, '*char')';  % Req Proc Step ID 2
hdr.series.reqprocstid3 = fread(id, 16, '*char')';  % Req Proc Step ID 3
hdr.series.schprocstid2 = fread(id, 16, '*char')';  % Sched Proc Step ID 2
hdr.series.schprocstid3 = fread(id, 16, '*char')';  % Sched Proc Step ID 3
hdr.series.refImgUID = fread(id, 128, '*char')';  % Dicom Reference Image 
hdr.series.PdgmStr = fread(id, 64, '*char')';  
hdr.series.PdgmDesc = fread(id, 256, '*char')';  
hdr.series.PdgmUID = fread(id, 64, '*char')';  
hdr.series.ApplName = fread(id, 16, '*char')';  
hdr.series.ApplVer = fread(id, 16, '*char')';  
hdr.series.asset_appl = fread(id, 12, '*char')';  % Asset application name
hdr.series.scic_a = fread(id, 32, '*char')';  % Scic_a values from CoilConfig.cfg
hdr.series.scic_s = fread(id, 32, '*char')';  % Scic_s values from CoilConfig.cfg
hdr.series.scic_c = fread(id, 32, '*char')';  % Scic_c values from CoilConfig.cfg
hdr.series.pure_cfg_params = fread(id, 64, '*char')';  % PURE Config Parameters from pure.cfg 
hdr.series.se_padding = fread(id, 423, '*char')';  % Spare Space
hdr.image.dfov = fread(id, 1, 'float');  % Display field of view - X (mm)
hdr.image.dfov_rect = fread(id, 1, 'float');  % Display field of view - Y (if different)
hdr.image.sctime = fread(id, 1, 'float');  % Duration of scan
hdr.image.slthick = fread(id, 1, 'float');  % Slice Thickness (mm)
hdr.image.scanspacing = fread(id, 1, 'float');  % Spacing between scans (mm?)
hdr.image.loc = fread(id, 1, 'float');  % Image location
hdr.image.tbldlta = fread(id, 1, 'float');  % Table Delta
hdr.image.nex = fread(id, 1, 'float');  % Number of Excitations
hdr.image.reptime = fread(id, 1, 'float');  % Cardiac repetition time
hdr.image.saravg = fread(id, 1, 'float');  % Average SAR
hdr.image.sarpeak = fread(id, 1, 'float');  % Peak SAR
hdr.image.pausetime = fread(id, 1, 'float');  % Pause Time
hdr.image.vbw = fread(id, 1, 'float');  % Variable Bandwidth (Hz)
hdr.image.user0 = fread(id, 1, 'float');  % User Variable 0
hdr.image.user1 = fread(id, 1, 'float');  % User Variable 1
hdr.image.user2 = fread(id, 1, 'float');  % User Variable 2
hdr.image.user3 = fread(id, 1, 'float');  % User Variable 3
hdr.image.user4 = fread(id, 1, 'float');  % User Variable 4
hdr.image.user5 = fread(id, 1, 'float');  % User Variable 5
hdr.image.user6 = fread(id, 1, 'float');  % User Variable 6
hdr.image.user7 = fread(id, 1, 'float');  % User Variable 7
hdr.image.user8 = fread(id, 1, 'float');  % User Variable 8
hdr.image.user9 = fread(id, 1, 'float');  % User Variable 9
hdr.image.user10 = fread(id, 1, 'float');  % User Variable 10
hdr.image.user11 = fread(id, 1, 'float');  % User Variable 11
hdr.image.user12 = fread(id, 1, 'float');  % User Variable 12
hdr.image.user13 = fread(id, 1, 'float');  % User Variable 13
hdr.image.user14 = fread(id, 1, 'float');  % User Variable 14
hdr.image.user15 = fread(id, 1, 'float');  % User Variable 15
hdr.image.user16 = fread(id, 1, 'float');  % User Variable 16
hdr.image.user17 = fread(id, 1, 'float');  % User Variable 17
hdr.image.user18 = fread(id, 1, 'float');  % User Variable 18
hdr.image.user19 = fread(id, 1, 'float');  % User Variable 19
hdr.image.user20 = fread(id, 1, 'float');  % User Variable 20
hdr.image.user21 = fread(id, 1, 'float');  % User Variable 21
hdr.image.user22 = fread(id, 1, 'float');  % User Variable 22
hdr.image.proj_ang = fread(id, 1, 'float');  % Projection Angle
hdr.image.concat_sat = fread(id, 1, 'float');  % Concat Sat Type Flag
hdr.image.user23 = fread(id, 1, 'float');  % User Variable 23
hdr.image.user24 = fread(id, 1, 'float');  % User Variable 24
hdr.image.x_axis_rot = fread(id, 1, 'float');  % X Axis Rotation
hdr.image.y_axis_rot = fread(id, 1, 'float');  % Y Axis Rotation
hdr.image.z_axis_rot = fread(id, 1, 'float');  % Z Axis Rotation
hdr.image.ihtagfa = fread(id, 1, 'float');  % Tagging Flip Angle
hdr.image.ihtagor = fread(id, 1, 'float');  % Cardiac Tagging Orientation
hdr.image.ihbspti = fread(id, 1, 'float');  % Blood Suppression TI
hdr.image.rtia_timer = fread(id, 1, 'float');  % Float Slop Field 4
hdr.image.fps = fread(id, 1, 'float');  % Float Slop Field 5
hdr.image.vencscale = fread(id, 1, 'float');  % Scale Weighted Venc
hdr.image.dbdt = fread(id, 1, 'float');  % peak rate of change of gradient field, tesla/sec
hdr.image.dbdtper = fread(id, 1, 'float');  % limit in units of percent of theoretical curve
hdr.image.estdbdtper = fread(id, 1, 'float');  % PSD estimated limit in units of percent
hdr.image.estdbdtts = fread(id, 1, 'float');  % PSD estimated limit in Teslas/sec
hdr.image.saravghead = fread(id, 1, 'float');  % Avg head SAR
hdr.image.neg_scanspacing = fread(id, 1, 'float');  % Negative scan spacing for overlap slices
hdr.image.user25 = fread(id, 1, 'float');  % User Variable 25
hdr.image.user26 = fread(id, 1, 'float');  % User Variable 26
hdr.image.user27 = fread(id, 1, 'float');  % User Variable 27
hdr.image.user28 = fread(id, 1, 'float');  % User Variable 28
hdr.image.user29 = fread(id, 1, 'float');  % User Variable 29
hdr.image.user30 = fread(id, 1, 'float');  % User Variable 30
hdr.image.user31 = fread(id, 1, 'float');  % User Variable 31
hdr.image.user32 = fread(id, 1, 'float');  % User Variable 32
hdr.image.user33 = fread(id, 1, 'float');  % User Variable 33
hdr.image.user34 = fread(id, 1, 'float');  % User Variable 34
hdr.image.user35 = fread(id, 1, 'float');  % User Variable 35
hdr.image.user36 = fread(id, 1, 'float');  % User Variable 36
hdr.image.user37 = fread(id, 1, 'float');  % User Variable 37
hdr.image.user38 = fread(id, 1, 'float');  % User Variable 38
hdr.image.user39 = fread(id, 1, 'float');  % User Variable 39
hdr.image.user40 = fread(id, 1, 'float');  % User Variable 40
hdr.image.user41 = fread(id, 1, 'float');  % User Variable 41
hdr.image.user42 = fread(id, 1, 'float');  % User Variable 42
hdr.image.user43 = fread(id, 1, 'float');  % User Variable 43
hdr.image.user44 = fread(id, 1, 'float');  % User Variable 44
hdr.image.user45 = fread(id, 1, 'float');  % User Variable 45
hdr.image.user46 = fread(id, 1, 'float');  % User Variable 46
hdr.image.user47 = fread(id, 1, 'float');  % User Variable 47
hdr.image.user48 = fread(id, 1, 'float');  % User Variable 48
hdr.image.RegressorVal = fread(id, 1, 'float');  
hdr.image.SliceAsset = fread(id, 1, 'float');  % Slice Asset in Asset Screen 
hdr.image.PhaseAsset = fread(id, 1, 'float');  % Phase Asset in Asset Screen 
hdr.image.sarValues = fread(id, 4, 'float');  % correspoding SAR values for defined terms 
hdr.image.shim_fov = fread(id, 2, 'float');  
hdr.image.shim_ctr_R = fread(id, 2, 'float');  
hdr.image.shim_ctr_A = fread(id, 2, 'float');  
hdr.image.shim_ctr_S = fread(id, 2, 'float');  
hdr.image.dim_X = fread(id, 1, 'float');  % Image dimension - X
hdr.image.dim_Y = fread(id, 1, 'float');  % Image dimension - Y
hdr.image.pixsize_X = fread(id, 1, 'float');  % Image pixel size - X
hdr.image.pixsize_Y = fread(id, 1, 'float');  % Image pixel size - Y
hdr.image.ctr_R = fread(id, 1, 'float');  % Center R coord of plane image
hdr.image.ctr_A = fread(id, 1, 'float');  % Center A coord of plane image
hdr.image.ctr_S = fread(id, 1, 'float');  % Center S coord of plane image
hdr.image.norm_R = fread(id, 1, 'float');  % Normal R coord
hdr.image.norm_A = fread(id, 1, 'float');  % Normal A coord
hdr.image.norm_S = fread(id, 1, 'float');  % Normal S coord
hdr.image.tlhc_R = fread(id, 1, 'float');  % R Coord of Top Left Hand Corner
hdr.image.tlhc_A = fread(id, 1, 'float');  % A Coord of Top Left Hand Corner
hdr.image.tlhc_S = fread(id, 1, 'float');  % S Coord of Top Left Hand Corner
hdr.image.trhc_R = fread(id, 1, 'float');  % R Coord of Top Right Hand Corner
hdr.image.trhc_A = fread(id, 1, 'float');  % A Coord of Top Right Hand Corner
hdr.image.trhc_S = fread(id, 1, 'float');  % S Coord of Top Right Hand Corner
hdr.image.brhc_R = fread(id, 1, 'float');  % R Coord of Bottom Right Hand Corner
hdr.image.brhc_A = fread(id, 1, 'float');  % A Coord of Bottom Right Hand Corner
hdr.image.brhc_S = fread(id, 1, 'float');  % S Coord of Bottom Right Hand Corner
hdr.image.cal_fldstr = fread(id, 1, 'ulong');  % Calibrated Field Strength (x10 uGauss)
hdr.image.im_checksum = fread(id, 1, 'ulong');  % AcqRecon record checksum
hdr.image.user_usage_tag = fread(id, 1, 'ulong');  % Defines how following user CVs are to be filled in
hdr.image.user_fill_mapMSW = fread(id, 1, 'ulong');  % Define what process fills in the user CVs, ifcc or TIR
hdr.image.user_fill_mapLSW = fread(id, 1, 'ulong');  % Define what process fills in the user CVs, ifcc or TIR
hdr.image.im_archived = fread(id, 1, 'long');  % Image Archive Flag
hdr.image.im_complete = fread(id, 1, 'long');  % Image Complete Flag
hdr.image.im_datetime = fread(id, 1, 'int');  % Allocation Image date/time stamp
hdr.image.im_actual_dt = fread(id, 1, 'int');  % Actual Image date/time stamp
hdr.image.tr = fread(id, 1, 'int');  % Pulse repetition time(usec)
hdr.image.ti = fread(id, 1, 'int');  % Pulse inversion time(usec)
hdr.image.te = fread(id, 1, 'int');  % Pulse echo time(usec)
hdr.image.te2 = fread(id, 1, 'int');  % Second echo echo (usec)
hdr.image.tdel = fread(id, 1, 'int');  % Delay time after trigger (msec)
hdr.image.mindat = fread(id, 1, 'int');  % Minimum Delay after Trigger (uSec)
hdr.image.obplane = fread(id, 1, 'int');  % Oblique Plane
hdr.image.slocfov = fread(id, 1, 'int');  % Slice Offsets on Freq axis
hdr.image.xmtfreq = fread(id, 1, 'int');  % Center Frequency (0.1 Hz)
hdr.image.autoxmtfreq = fread(id, 1, 'int');  % Auto Center Frequency (0.1 Hz)
hdr.image.user_bitmap = fread(id, 1, 'int');  % Bitmap defining user CVs
hdr.image.iopt = fread(id, 1, 'int');  % Imaging Options
hdr.image.psd_datetime = fread(id, 1, 'int');  % PSD Creation Date and Time
hdr.image.rawrunnum = fread(id, 1, 'int');  % RawData Run Number
hdr.image.intr_del = fread(id, 1, 'int');  % Interimage/interloc delay (uSec)
hdr.image.im_lastmod = fread(id, 1, 'int');  % Date/Time of Last Change
hdr.image.im_pds_a = fread(id, 1, 'int');  % PixelData size - as stored
hdr.image.im_pds_c = fread(id, 1, 'int');  % PixelData size - Compressed
hdr.image.im_pds_u = fread(id, 1, 'int');  % PixelData size - UnCompressed
hdr.image.thresh_min1 = fread(id, 1, 'int');  % Lower Range of Pixels 1
hdr.image.thresh_max1 = fread(id, 1, 'int');  % Upper Range of Pixels 1
hdr.image.thresh_min2 = fread(id, 1, 'int');  % Lower Range of Pixels 2
hdr.image.thresh_max2 = fread(id, 1, 'int');  % Upper Range of Pixels 2
hdr.image.numslabs = fread(id, 1, 'int');  % Number of 3D Slabs
hdr.image.locsperslab = fread(id, 1, 'int');  % Slice Locs Per 3D Slab
hdr.image.overlaps = fread(id, 1, 'int');  % # of Slice Locs on Each Slab Which Overlap N eighbors
hdr.image.slop_int_4 = fread(id, 1, 'int');  % Image Filtering 0.5/0.2T
hdr.image.dfax = fread(id, 1, 'int');  % Diffusion Direction for DW-EPI 
hdr.image.fphase = fread(id, 1, 'int');  % Number Of Phases
hdr.image.offsetfreq = fread(id, 1, 'int');  % Offset Frequency - Mag.Transfer
hdr.image.b_value = fread(id, 1, 'int');  % B-value for DW-EPI
hdr.image.iopt2 = fread(id, 1, 'int');  % Imaging Option2
hdr.image.ihtagging = fread(id, 1, 'int');  % tag type 
hdr.image.ihtagspc = fread(id, 1, 'int');  % tag space 
hdr.image.ihfcineim = fread(id, 1, 'int');  % Fast CINE interpolation method
hdr.image.ihfcinent = fread(id, 1, 'int');  % Fast CINE normalization type
hdr.image.num_seg = fread(id, 1, 'int');  % YMSge05074
hdr.image.oprtarr = fread(id, 1, 'int');  % Respiratory Trigger windo
hdr.image.averages = fread(id, 1, 'int');  % Number of averages for spectro
hdr.image.station_index = fread(id, 1, 'int');  % Station Index
hdr.image.station_total = fread(id, 1, 'int');  % Station Total
hdr.image.iopt3 = fread(id, 1, 'int');  % Imaging Option3
hdr.image.delAcq = fread(id, 1, 'int');  % Delay after Acquisition (MP / fMRI screen) 
hdr.image.imatrix_X = fread(id, 1, 'short');  % Image matrix size - X
hdr.image.imatrix_Y = fread(id, 1, 'short');  % Image matrix size - Y
hdr.image.im_exno = fread(id, 1, 'ushort');  % Exam number for this image
hdr.image.img_window = fread(id, 1, 'ushort');  % Window Value
hdr.image.img_level = fread(id, 1, 'short');  % Level Value
hdr.image.numecho = fread(id, 1, 'short');  % Number of echoes
hdr.image.echonum = fread(id, 1, 'short');  % Echo Number
hdr.image.im_uniq = fread(id, 1, 'short');  % The Make-Unique Flag
hdr.image.im_seno = fread(id, 1, 'short');  % Series Number for this image
hdr.image.im_no = fread(id, 1, 'short');  % Image Number
hdr.image.contmode = fread(id, 1, 'short');  % Image Contrast Mode
hdr.image.serrx = fread(id, 1, 'short');  % Series from which prescribed
hdr.image.imgrx = fread(id, 1, 'short');  % Image from which prescribed
hdr.image.screenformat = fread(id, 1, 'short');  % Screen Format(8/16 bit)
hdr.image.plane = fread(id, 1, 'short');  % Plane Type
hdr.image.im_compress = fread(id, 1, 'short');  % Image compression type for allocation
hdr.image.im_scouttype = fread(id, 1, 'short');  % Scout Type (AP or lateral)
hdr.image.contig = fread(id, 1, 'short');  % Continuous Slices Flag
hdr.image.hrtrate = fread(id, 1, 'short');  % Cardiac Heart Rate (bpm)
hdr.image.trgwindow = fread(id, 1, 'short');  % Trigger window (% of R-R interval)
hdr.image.imgpcyc = fread(id, 1, 'short');  % Images per cardiac cycle
hdr.image.xmtgain = fread(id, 1, 'short');  % Actual Transmit Gain (.1 db)
hdr.image.rcvgain1 = fread(id, 1, 'short');  % Actual Receive Gain Analog (.1 db)
hdr.image.rcvgain2 = fread(id, 1, 'short');  % Actual Receive Gain Digital (.1 db)
hdr.image.mr_flip = fread(id, 1, 'short');  % Flip Angle for GRASS scans (deg.)
hdr.image.cphase = fread(id, 1, 'short');  % Total Cardiac Phase prescribed
hdr.image.swappf = fread(id, 1, 'short');  % Swap Phase/Frequency Axis
hdr.image.pauseint = fread(id, 1, 'short');  % Pause Interval (slices)
hdr.image.autoxmtgain = fread(id, 1, 'short');  % Auto Transmit Gain (0.1 dB)
hdr.image.prescan_r1 = fread(id, 1, 'short');  % PreScan R1 - Analog
hdr.image.prescan_r2 = fread(id, 1, 'short');  % PreScan R2 - Digital
hdr.image.not_used_1 = fread(id, 1, 'short');  % Available for use 
hdr.image.imode = fread(id, 1, 'short');  % Imaging Mode
hdr.image.pseq = fread(id, 1, 'short');  % Pulse Sequence
hdr.image.pseqmode = fread(id, 1, 'short');  % Pulse Sequence Mode
hdr.image.unused_monsar = fread(id, 1, 'short');  % Monitor SAR flag No longer is use 
hdr.image.ctyp = fread(id, 1, 'short');  % Coil Type
hdr.image.surfctyp = fread(id, 1, 'short');  % Surface Coil Type
hdr.image.surfcext = fread(id, 1, 'short');  % Extremity Coil Flag
hdr.image.supp_tech = fread(id, 1, 'short');  % SAT fat/water/none
hdr.image.slquant = fread(id, 1, 'short');  % Number of slices in this scan group
hdr.image.gpre = fread(id, 1, 'short');  % Graphically prescribed
hdr.image.satbits = fread(id, 1, 'short');  % Bitmap of SAT selections
hdr.image.scic = fread(id, 1, 'short');  % Surface Coil Intensity Correction Flag
hdr.image.satxloc1 = fread(id, 1, 'short');  % R-side SAT pulse loc rel to lndmrk
hdr.image.satxloc2 = fread(id, 1, 'short');  % L-side SAT pulse loc rel to lndmrk
hdr.image.satyloc1 = fread(id, 1, 'short');  % A-side SAT pulse loc rel to lndmrk
hdr.image.satyloc2 = fread(id, 1, 'short');  % P-side SAT pulse loc rel to lndmrk
hdr.image.satzloc1 = fread(id, 1, 'short');  % S-side SAT pulse loc rel to lndmrk
hdr.image.satzloc2 = fread(id, 1, 'short');  % I-side SAT pulse loc rel to lndmrk
hdr.image.satxthick = fread(id, 1, 'short');  % Thickness of X-axis SAT pulse
hdr.image.satythick = fread(id, 1, 'short');  % Thickness of Y-axis SAT pulse
hdr.image.satzthick = fread(id, 1, 'short');  % Thickness of Z-axis SAT pulse
hdr.image.flax = fread(id, 1, 'short');  % Phase contrast flow axis
hdr.image.venc = fread(id, 1, 'short');  % Phase contrast velocity encoding
hdr.image.thk_disclmr = fread(id, 1, 'short');  % Slice Thickness
hdr.image.ps_flag = fread(id, 1, 'short');  % Auto/Manual Prescan flag
hdr.image.ps_status = fread(id, 1, 'short');  % Bitmap of changed values
hdr.image.image_type = fread(id, 1, 'short');  % Magnitude, Phase, Imaginary, or Real
hdr.image.vas_collapse = fread(id, 1, 'short');  % Collapse Image
hdr.image.proj_alg = fread(id, 1, 'short');  % Projection Algorithm
hdr.image.echo_trn_len = fread(id, 1, 'short');  % Echo Train Length for Fast Spin Echo
hdr.image.frac_echo = fread(id, 1, 'short');  % Fractional Echo - Effective TE Flag
hdr.image.prep_pulse = fread(id, 1, 'short');  % Preporatory Pulse Option
hdr.image.cphasenum = fread(id, 1, 'short');  % Cardiac Phase Number
hdr.image.var_echo = fread(id, 1, 'short');  % Variable Echo Flag
hdr.image.scanactno = fread(id, 1, 'short');  % Scan Acquisition Number
hdr.image.vasflags = fread(id, 1, 'short');  % Magnitude Weighting Flag
hdr.image.integrity = fread(id, 1, 'short');  % GE Image Integrity
hdr.image.freq_dir = fread(id, 1, 'short');  % Frequency Direction
hdr.image.vas_mode = fread(id, 1, 'short');  % Vascular Mode
hdr.image.hole = fread(id, 1, 'short');  
hdr.image.pscopts = fread(id, 1, 'short');  % bitmap of prescan options
hdr.image.asoffsetx = fread(id, 1, 'short');  % gradient offset in X-direction
hdr.image.asoffsety = fread(id, 1, 'short');  % gradient offset in Y-direction
hdr.image.asoffsetz = fread(id, 1, 'short');  % gradient offset in Z-direction
hdr.image.unoriginal = fread(id, 1, 'short');  % identifies image as original or unoriginal
hdr.image.interleaves = fread(id, 1, 'short');  % number of EPI shots
hdr.image.effechospace = fread(id, 1, 'short');  % effective echo spacing for EPI
hdr.image.viewsperseg = fread(id, 1, 'short');  % views per segment
hdr.image.rbpm = fread(id, 1, 'short');  % respiratory rate, breaths per min
hdr.image.rtpoint = fread(id, 1, 'short');  % respiratory trigger point as percent of max.
hdr.image.rcvrtype = fread(id, 1, 'short');  % type of receiver used
hdr.image.sarMode = fread(id, 1, 'short');  % Sar Ctrl Mode (Normal, 1st or 2nd) 
hdr.image.dBdtMode = fread(id, 1, 'short');  % dBdt Ctrl Mode (Normal, 1st or 2nd) 
hdr.image.govBody = fread(id, 1, 'short');  % Governing Body MHW/IEC/FDA 
hdr.image.sarDefinition = fread(id, 1, 'short');  % Defined terms avaialble 
hdr.image.no_shimvol = fread(id, 1, 'short');  
hdr.image.shim_vol_type = fread(id, 1, 'short');  
hdr.image.psdname = fread(id, 33, '*char')';  % Pulse Sequence Name
hdr.image.proj_name = fread(id, 13, '*char')';  % Projection Algorithm Name
hdr.image.psd_iname = fread(id, 13, '*char')';  % PSD name from inside PSD
hdr.image.im_diskid = fread(id, 1, '*char')';  % Disk ID for this Image
hdr.image.pdid = fread(id, 14, '*char')';  % Pixel Data ID
hdr.image.im_suid = fread(id, 4, '*char')';  % Suite id for this image
hdr.image.contrastIV = fread(id, 17, '*char')';  % IV Contrast Agent
hdr.image.contrastOral = fread(id, 17, '*char')';  % Oral Contrast Agent
hdr.image.loc_ras = fread(id, 1, '*char')';  % RAS letter of image location
hdr.image.forimgrev = fread(id, 4, '*char')';  % Foreign Image Revision
hdr.image.cname = fread(id, 17, '*char')';  % Coil Name
hdr.image.im_verscre = fread(id, 2, '*char')';  % Genesis Version - Created
hdr.image.im_verscur = fread(id, 2, '*char')';  % Genesis Version - Now
hdr.image.im_alloc_key = fread(id, 13, '*char')';  % 
hdr.image.ref_img = fread(id, 1, '*char')';  % Reference Image Field
hdr.image.sum_img = fread(id, 1, '*char')';  % Summary Image Field
hdr.image.filter_mode = fread(id, 16, '*char')';  % String Slop Field 1
hdr.image.slop_str_2 = fread(id, 16, '*char')';  % String Slop Field 2
hdr.image.image_uid = fread(id, 32, '*char')';  % Image Unique ID
hdr.image.sop_uid = fread(id, 32, '*char')';  % Service Obj Class Unique ID
hdr.image.GEcname = fread(id, 24, '*char')';  % GECoilname for the cname 
hdr.image.usedCoilData = fread(id, 100, '*char')';  % Concatenated str of coilcode and chip serialID 
hdr.image.astcalseriesuid = fread(id, 32, '*char')';  
hdr.image.purecalseriesuid = fread(id, 32, '*char')';  
hdr.image.sys_type = fread(id, 64, '*char')';  
hdr.image.xml_psc_shm_vol = fread(id, 32, '*char')';  
hdr.image.img_hdr_padding = fread(id, 164, '*char')';  
fclose(id);
hdrrdb = hdr.rdb;
